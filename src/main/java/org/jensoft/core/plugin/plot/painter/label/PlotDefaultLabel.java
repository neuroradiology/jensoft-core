/*
 * Copyright (c) JenSoft API
 * This source file is part of JenSoft API, All rights reserved.
 * JENSOFT PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
package org.jensoft.core.plugin.plot.painter.label;

import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.geom.Point2D;

import org.jensoft.core.plugin.plot.spline.AbstractPlot;

/**
 * <code>PlotDefaultDraw</code>
 * 
 * @author sebastien janaud
 * 
 */
public class PlotDefaultLabel extends AbstractPlotLabel {

	/** font for debug anchor */
	private Font f = new Font("Courier", Font.PLAIN, 12);

	public PlotDefaultLabel() {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.jensoft.core.plugin.plot.painter.AbstractPlotPainter#paintPlot(java
	 * .awt.Graphics2D, com.jensoft.core.plugin.plot.spline.AbstractPlot)
	 */
	@Override
	public final void drawLabel(Graphics2D g2d, AbstractPlot plot) {
		FontMetrics fm = g2d.getFontMetrics(f);
		g2d.setFont(f);
		int h = fm.getAscent() / 2;
		if (plot.getPlotDrawColor() != null)
			g2d.setColor(plot.getPlotDrawColor());
		else
			g2d.setColor(plot.getHost().getProjection().getThemeColor());

//		for (int i = 0; i < plot.getDevicePoints().size(); i++) {
//			String s = Integer.toString(i);
//			int w = fm.stringWidth(s) / 2;
//			Point2D p = plot.getDevicePoints().get(i);
//			
//			g2d.drawString(Integer.toString(i), (int) (p.getX() - w), (int) ( p.getY() + h));
//		}
		
		
		//do not take in account point generated by step interpolation, include only native user points
		for (int i = 0; i < plot.getUserPoints().size(); i++) {
			String s = Integer.toString(i);
			int w = fm.stringWidth(s) / 2;
			Point2D p = plot.getUserPoints().get(i);
			Point2D d = plot.getHost().getProjection().userToPixel(p);
			g2d.drawString(Integer.toString(i), (int) (d.getX() - w), (int) ( d.getY() + h));
		}
	}

}
